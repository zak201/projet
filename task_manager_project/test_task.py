#!/usr/bin/env python3
"""
Script de test pour v√©rifier le fonctionnement des classes Task, Priority et Status
"""

import sys
import os

# Ajouter le dossier src au path pour pouvoir importer les modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from task_manager import Task, Priority, Status


def test_task_creation():
    """Test de cr√©ation d'une t√¢che"""
    print("=== Test de cr√©ation de t√¢che ===")
    
    # Cr√©er une t√¢che simple
    task = Task(
        title="T√¢che de test",
        description="Description de la t√¢che de test",
        priority=Priority.HIGH,
        assignee="John Doe"
    )
    
    print(f"T√¢che cr√©√©e: {task}")
    print(f"ID: {task.id}")
    print(f"Statut: {task.status.value}")
    print(f"Priorit√©: {task.priority.value}")
    print(f"Assign√© √†: {task.assignee}")
    print(f"Cr√©√© le: {task.created_at}")
    print()


def test_task_methods():
    """Test des m√©thodes de la classe Task"""
    print("=== Test des m√©thodes ===")
    
    task = Task(
        title="T√¢che avec m√©thodes",
        description="Test des diff√©rentes m√©thodes",
        priority=Priority.MEDIUM
    )
    
    print(f"T√¢che initiale: {task}")
    
    # Test mark_completed
    task.mark_completed()
    print(f"Apr√®s mark_completed: {task}")
    
    # Test update_priority
    task.update_priority(Priority.URGENT)
    print(f"Apr√®s update_priority: {task}")
    
    # Test assign_to_project
    task.assign_to_project("Projet Test")
    print(f"Apr√®s assign_to_project: {task}")
    print()


def test_serialization():
    """Test de s√©rialisation/d√©s√©rialisation"""
    print("=== Test de s√©rialisation ===")
    
    # Cr√©er une t√¢che
    original_task = Task(
        title="T√¢che pour s√©rialisation",
        description="Test de to_dict et from_dict",
        priority=Priority.LOW,
        status=Status.IN_PROGRESS,
        project="Projet S√©rialisation",
        assignee="Alice",
        due_date="2024-12-31T23:59:59"
    )
    
    print(f"T√¢che originale: {original_task}")
    
    # Convertir en dictionnaire
    task_dict = original_task.to_dict()
    print(f"Dictionnaire: {task_dict}")
    
    # Recr√©er √† partir du dictionnaire
    reconstructed_task = Task.from_dict(task_dict)
    print(f"T√¢che reconstruite: {reconstructed_task}")
    
    # V√©rifier que les objets sont identiques
    print(f"Les t√¢ches sont identiques: {original_task.to_dict() == reconstructed_task.to_dict()}")
    print()


def test_enums():
    """Test des √©num√©rations"""
    print("=== Test des √©num√©rations ===")
    
    print("Priorit√©s disponibles:")
    for priority in Priority:
        print(f"  - {priority.name}: {priority.value}")
    
    print("\nStatuts disponibles:")
    for status in Status:
        print(f"  - {status.name}: {status.value}")
    print()


def test_task_repr():
    """Test de la m√©thode __repr__ pour couvrir la ligne 129"""
    print("=== Test de __repr__ ===")
    
    task = Task(
        title="T√¢che Test",
        description="Description de test",
        priority=Priority.HIGH,
        status=Status.IN_PROGRESS,
        project="Projet Test",
        assignee="Alice"
    )
    
    repr_str = repr(task)
    print(f"Repr√©sentation d√©taill√©e: {repr_str}")
    
    # V√©rifier que tous les √©l√©ments sont pr√©sents
    assert "Task(" in repr_str
    assert "title='T√¢che Test'" in repr_str
    assert "description='Description de test'" in repr_str
    assert "status=in_progress" in repr_str
    assert "priority=high" in repr_str
    assert "project=Projet Test" in repr_str
    assert "assignee=Alice" in repr_str
    print("‚úÖ __repr__ fonctionne correctement")
    print()


def test_task_all_statuses():
    """Test de tous les statuts possibles"""
    print("=== Test de tous les statuts ===")
    
    for status in Status:
        task = Task("T√¢che", status=status)
        assert task.status == status
        assert task.status.value == status.value
        print(f"‚úÖ Statut {status.name} fonctionne")
    print()


def test_task_all_priorities():
    """Test de toutes les priorit√©s possibles"""
    print("=== Test de toutes les priorit√©s ===")
    
    for priority in Priority:
        task = Task("T√¢che", priority=priority)
        assert task.priority == priority
        assert task.priority.value == priority.value
        print(f"‚úÖ Priorit√© {priority.name} fonctionne")
    print()


def test_task_with_none_values():
    """Test avec des valeurs None"""
    print("=== Test avec valeurs None ===")
    
    task = Task(
        title="T√¢che avec None",
        project=None,
        assignee=None,
        due_date=None
    )
    
    assert task.project is None
    assert task.assignee is None
    assert task.due_date is None
    
    # Test to_dict avec None
    task_dict = task.to_dict()
    assert task_dict['project'] is None
    assert task_dict['assignee'] is None
    assert task_dict['due_date'] is None
    
    print("‚úÖ Gestion des valeurs None fonctionne")
    print()


if __name__ == "__main__":
    print("üöÄ D√©marrage des tests du gestionnaire de t√¢ches\n")
    
    test_task_creation()
    test_task_methods()
    test_serialization()
    test_enums()
    test_task_repr()
    test_task_all_statuses()
    test_task_all_priorities()
    test_task_with_none_values()
    
    print("‚úÖ Tous les tests ont √©t√© ex√©cut√©s avec succ√®s!") 